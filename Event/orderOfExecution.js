console.log("start");

setTimeout(() => {
  console.log("Timeout 1");
}, 10);

Promise.resolve()
  .then(() => {
    console.log("Promise 1");
  })
  .then(() => {
    console.log("Promise 2");
  });

function newPromise() {
  return new Promise((res, rej) => {
    setTimeout(() => {
      console.log("Promise 3");
      res();
    }, 1000);
  });
}

newPromise().then(() => {
  console.log("After promise 3");
});

setTimeout(() => {
  console.log("Timeout 2");
}, 0);

setTimeout(() => {
  console.log("Timeout 3");
}, 2000);

console.log("end");

/*
The Web API has methods and properties that can extend the functionality of the browser.
DOM Manipulation Functions:
Event handlling functions
fetch API

console API : log
timers : settimeout and setinterval
storage : local storage, session storage
window : alert, confirm, prompt
Geolocation API


Call Stack: Handles synchronous code. Each function call is pushed to the stack and popped when the function completes.

The Callback Queue (also called the Task Queue) holds asynchronous callbacks that need to be executed once
 the call stack is empty. For example, callbacks from setTimeout, setInterval, I/O events, etc., 
 are placed in the callback queue.

 The Microtask Queue holds microtasks, which are a special type of task. Microtasks are typically 
 generated by promises (.then(), .catch(), .finally()). 
 Microtasks have higher priority than tasks in the callback queue.
 
 
*/